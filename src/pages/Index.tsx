import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface Question {
  id: number;
  text: string;
  options: {
    text: string;
    character: string;
  }[];
}

interface Character {
  id: string;
  name: string;
  emoji: string;
  description: string;
  traits: string[];
  color: string;
}

const questions: Question[] = [
  {
    id: 1,
    text: '–ö–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?',
    options: [
      { text: '–°—Ç—Ä–æ—é –∏ —Å–æ–∑–¥–∞—é —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ', character: 'steve' },
      { text: '–ò—Å—Å–ª–µ–¥—É—é –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞', character: 'alex' },
      { text: '–û—Ö—Ä–∞–Ω—è—é —Å–≤–æ—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é', character: 'creeper' },
      { text: '–ü–æ–º–æ–≥–∞—é –¥—Ä—É–∑—å—è–º', character: 'villager' }
    ]
  },
  {
    id: 2,
    text: '–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?',
    options: [
      { text: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', character: 'steve' },
      { text: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è', character: 'alex' },
      { text: '–ó–∞—â–∏—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', character: 'creeper' },
      { text: '–û–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º', character: 'villager' }
    ]
  },
  {
    id: 3,
    text: '–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—ã?',
    options: [
      { text: '–ü–ª–∞–Ω–∏—Ä—É—é –∏ –¥–µ–π—Å—Ç–≤—É—é –º–µ—Ç–æ–¥–∏—á–Ω–æ', character: 'steve' },
      { text: '–ò—â—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è', character: 'alex' },
      { text: '–ò—Å–ø–æ–ª—å–∑—É—é —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã', character: 'creeper' },
      { text: '–°–æ–≤–µ—Ç—É—é—Å—å —Å –¥—Ä—É–≥–∏–º–∏', character: 'villager' }
    ]
  },
  {
    id: 4,
    text: '–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å?',
    options: [
      { text: '–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –±–æ–ª—å—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º', character: 'steve' },
      { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ', character: 'alex' },
      { text: '–ë—ã—Ç—å –Ω–∞—á–µ–∫—É –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –¥–µ–π—Å—Ç–≤–∏—é', character: 'creeper' },
      { text: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –¥—Ä—É–∑—å—è–º–∏', character: 'villager' }
    ]
  },
  {
    id: 5,
    text: '–ö–∞–∫ —Ç–µ–±—è –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ?',
    options: [
      { text: '–ù–∞–¥–µ–∂–Ω—ã–π –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π', character: 'steve' },
      { text: '–°–º–µ–ª—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π', character: 'alex' },
      { text: '–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∏ –æ–ø–∞—Å–Ω—ã–π', character: 'creeper' },
      { text: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π', character: 'villager' }
    ]
  },
  {
    id: 6,
    text: '–¢–≤–æ—è –ª—é–±–∏–º–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?',
    options: [
      { text: '–î–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', character: 'steve' },
      { text: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –±–∏–æ–º—ã', character: 'alex' },
      { text: '–ü–æ–¥–∫—Ä–∞–¥—ã–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ', character: 'creeper' },
      { text: '–¢–æ—Ä–≥–æ–≤–∞—Ç—å –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è', character: 'villager' }
    ]
  }
];

const characters: Character[] = [
  {
    id: 'steve',
    name: '–°—Ç–∏–≤',
    emoji: '‚õèÔ∏è',
    description: '–¢—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–µ—Ä–æ–π Minecraft! –¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–π –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º.',
    traits: ['–¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π', '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π', '–ù–∞–¥–µ–∂–Ω—ã–π', '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π'],
    color: 'from-blue-500 to-cyan-500'
  },
  {
    id: 'alex',
    name: '–ê–ª–µ–∫—Å',
    emoji: 'üó∫Ô∏è',
    description: '–¢—ã –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –õ—é–±–∏—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏ –Ω–µ –±–æ–∏—à—å—Å—è —Ä–∏—Å–∫–æ–≤–∞—Ç—å.',
    traits: ['–°–º–µ–ª—ã–π', '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π', '–ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π', '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π'],
    color: 'from-orange-500 to-red-500'
  },
  {
    id: 'creeper',
    name: '–ö—Ä–∏–ø–µ—Ä',
    emoji: 'üí•',
    description: '–¢—ã –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π! –ù–µ –ª—é–±–∏—à—å —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.',
    traits: ['–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π', '–†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π', '–í–∑—Ä—ã–≤–Ω–æ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π'],
    color: 'from-green-500 to-emerald-600'
  },
  {
    id: 'villager',
    name: '–ñ–∏—Ç–µ–ª—å –¥–µ—Ä–µ–≤–Ω–∏',
    emoji: 'üèòÔ∏è',
    description: '–¢—ã –¥—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏! –û–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º.',
    traits: ['–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π', '–©–µ–¥—Ä—ã–π', '–ú–∏—Ä–æ–ª—é–±–∏–≤—ã–π'],
    color: 'from-purple-500 to-pink-500'
  }
];

export default function Index() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<string, number>>({});
  const [showResult, setShowResult] = useState(false);
  const [result, setResult] = useState<Character | null>(null);

  const handleAnswer = (character: string) => {
    const newAnswers = { ...answers };
    newAnswers[character] = (newAnswers[character] || 0) + 1;
    setAnswers(newAnswers);

    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult(newAnswers);
    }
  };

  const calculateResult = (finalAnswers: Record<string, number>) => {
    let maxCount = 0;
    let resultCharacter = 'steve';

    Object.entries(finalAnswers).forEach(([char, count]) => {
      if (count > maxCount) {
        maxCount = count;
        resultCharacter = char;
      }
    });

    const character = characters.find(c => c.id === resultCharacter);
    setResult(character || characters[0]);
    setShowResult(true);
  };

  const restart = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResult(false);
    setResult(null);
  };

  if (showResult && result) {
    return (
      <div className={`min-h-screen bg-gradient-to-br ${result.color} flex items-center justify-center p-4`}>
        <Card className="max-w-2xl w-full bg-white/95 backdrop-blur-sm border-4 border-game-dark p-8">
          <div className="text-center space-y-6">
            <div className="text-8xl mb-4 animate-bounce-in">{result.emoji}</div>
            
            <div>
              <h1 className="text-5xl font-game text-game-dark mb-2">–¢—ã - {result.name}!</h1>
              <p className="text-xl font-body text-game-dark/80">{result.description}</p>
            </div>

            <div className="bg-game-dark/5 rounded-xl p-6">
              <h3 className="text-2xl font-game text-game-dark mb-4">–¢–≤–æ–∏ —á–µ—Ä—Ç—ã:</h3>
              <div className="flex flex-wrap gap-3 justify-center">
                {result.traits.map((trait, index) => (
                  <div
                    key={index}
                    className="bg-white border-2 border-game-dark px-4 py-2 rounded-full font-body text-game-dark"
                  >
                    ‚ú® {trait}
                  </div>
                ))}
              </div>
            </div>

            <div className="space-y-3">
              <Button
                onClick={restart}
                className="w-full h-16 text-2xl font-game bg-gradient-to-r from-game-orange to-game-yellow hover:scale-105 transition-transform"
              >
                <Icon name="RotateCcw" size={28} className="mr-2" />
                –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑
              </Button>

              <Button
                onClick={() => {
                  if (navigator.share) {
                    navigator.share({
                      title: '–ö–∞–∫–æ–π —Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ Minecraft?',
                      text: `–Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª: ${result.name}! ${result.emoji}`,
                      url: window.location.href
                    });
                  }
                }}
                variant="outline"
                className="w-full h-14 text-xl font-body border-2 border-game-dark hover:bg-white"
              >
                <Icon name="Share2" size={24} className="mr-2" />
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
              </Button>
            </div>

            <div className="pt-4 border-t-2 border-game-dark/10">
              <div className="grid grid-cols-4 gap-3">
                {characters.map((char) => (
                  <div
                    key={char.id}
                    className={`p-3 rounded-lg border-2 ${
                      char.id === result.id
                        ? 'bg-game-yellow border-game-dark'
                        : 'bg-white border-game-dark/20'
                    }`}
                  >
                    <div className="text-3xl mb-1">{char.emoji}</div>
                    <div className="text-xs font-body text-game-dark/70">{char.name}</div>
                    <div className="text-lg font-game text-game-dark">
                      {answers[char.id] || 0}/{questions.length}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </Card>
      </div>
    );
  }

  if (currentQuestion === 0 && Object.keys(answers).length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 flex items-center justify-center p-4">
        <Card className="max-w-2xl w-full bg-white/95 backdrop-blur-sm border-4 border-game-dark p-8">
          <div className="text-center space-y-6">
            <div className="flex justify-center gap-4 mb-4">
              <div className="text-6xl animate-bounce">‚õèÔ∏è</div>
              <div className="text-6xl animate-bounce" style={{ animationDelay: '0.1s' }}>üí•</div>
              <div className="text-6xl animate-bounce" style={{ animationDelay: '0.2s' }}>üó∫Ô∏è</div>
              <div className="text-6xl animate-bounce" style={{ animationDelay: '0.3s' }}>üèòÔ∏è</div>
            </div>

            <div>
              <h1 className="text-5xl font-game text-game-dark mb-3">
                –ö–∞–∫–æ–π —Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ Minecraft?
              </h1>
              <p className="text-xl font-body text-game-dark/80">
                –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π, –∫—Ç–æ —Ç—ã –≤ –º–∏—Ä–µ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç!
              </p>
            </div>

            <div className="bg-game-dark/5 rounded-xl p-6 text-left">
              <h3 className="text-xl font-game text-game-dark mb-3">–¢–µ–±—è –∂–¥–µ—Ç:</h3>
              <ul className="space-y-2 font-body text-game-dark/80">
                <li className="flex items-center gap-2">
                  <span className="text-2xl">üìù</span>
                  {questions.length} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                </li>
                <li className="flex items-center gap-2">
                  <span className="text-2xl">üé≠</span>
                  {characters.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </li>
                <li className="flex items-center gap-2">
                  <span className="text-2xl">‚ú®</span>
                  –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
                </li>
                <li className="flex items-center gap-2">
                  <span className="text-2xl">üì§</span>
                  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                </li>
              </ul>
            </div>

            <Button
              onClick={() => setCurrentQuestion(0)}
              className="w-full h-16 text-2xl font-game bg-gradient-to-r from-game-orange to-game-yellow hover:scale-105 transition-transform"
            >
              <Icon name="Play" size={32} className="mr-2" />
              –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
            </Button>

            <div className="grid grid-cols-4 gap-3 pt-4">
              {characters.map((char) => (
                <div key={char.id} className="text-center">
                  <div className="text-4xl mb-1">{char.emoji}</div>
                  <div className="text-xs font-body text-game-dark/70">{char.name}</div>
                </div>
              ))}
            </div>
          </div>
        </Card>
      </div>
    );
  }

  const question = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 flex items-center justify-center p-4">
      <Card className="max-w-2xl w-full bg-white/95 backdrop-blur-sm border-4 border-game-dark p-8">
        <div className="space-y-6">
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-lg font-game text-game-dark">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
              </span>
              <span className="text-lg font-game text-game-dark">
                {Math.round(progress)}%
              </span>
            </div>
            
            <div className="w-full bg-game-dark/20 rounded-full h-3 overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-game-orange to-game-yellow transition-all duration-500"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>

          <div className="text-center py-6">
            <h2 className="text-3xl font-game text-game-dark mb-2">
              {question.text}
            </h2>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {question.options.map((option, index) => (
              <Button
                key={index}
                onClick={() => handleAnswer(option.character)}
                className="h-auto py-6 px-6 text-lg font-body bg-white hover:bg-gradient-to-r hover:from-game-cyan hover:to-game-yellow border-2 border-game-dark text-game-dark hover:text-white transition-all hover:scale-105"
              >
                <div className="text-left">
                  <div className="text-3xl mb-2">
                    {characters.find(c => c.id === option.character)?.emoji}
                  </div>
                  {option.text}
                </div>
              </Button>
            ))}
          </div>

          <Button
            onClick={restart}
            variant="outline"
            className="w-full border-2 border-game-dark hover:bg-game-dark/10"
          >
            <Icon name="Home" size={20} className="mr-2" />
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </Button>
        </div>
      </Card>
    </div>
  );
}
