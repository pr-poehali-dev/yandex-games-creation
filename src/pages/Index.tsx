import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface Question {
  id: number;
  text: string;
  options: {
    text: string;
    character: string;
  }[];
}

interface Character {
  id: string;
  name: string;
  emoji: string;
  description: string;
  traits: string[];
  color: string;
}

const questions: Question[] = [
  {
    id: 1,
    text: '–ö–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?',
    options: [
      { text: '–°—Ç—Ä–æ—é –∏ —Å–æ–∑–¥–∞—é —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ', character: 'steve' },
      { text: '–ò—Å—Å–ª–µ–¥—É—é –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞', character: 'alex' },
      { text: '–û—Ö—Ä–∞–Ω—è—é —Å–≤–æ—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é', character: 'creeper' },
      { text: '–ü–æ–º–æ–≥–∞—é –¥—Ä—É–∑—å—è–º', character: 'villager' }
    ]
  },
  {
    id: 2,
    text: '–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?',
    options: [
      { text: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', character: 'steve' },
      { text: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è', character: 'alex' },
      { text: '–ó–∞—â–∏—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', character: 'creeper' },
      { text: '–û–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º', character: 'villager' }
    ]
  },
  {
    id: 3,
    text: '–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—ã?',
    options: [
      { text: '–ü–ª–∞–Ω–∏—Ä—É—é –∏ –¥–µ–π—Å—Ç–≤—É—é –º–µ—Ç–æ–¥–∏—á–Ω–æ', character: 'steve' },
      { text: '–ò—â—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è', character: 'alex' },
      { text: '–ò—Å–ø–æ–ª—å–∑—É—é —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã', character: 'creeper' },
      { text: '–°–æ–≤–µ—Ç—É—é—Å—å —Å –¥—Ä—É–≥–∏–º–∏', character: 'villager' }
    ]
  },
  {
    id: 4,
    text: '–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å?',
    options: [
      { text: '–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –±–æ–ª—å—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º', character: 'steve' },
      { text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ', character: 'alex' },
      { text: '–ë—ã—Ç—å –Ω–∞—á–µ–∫—É –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –¥–µ–π—Å—Ç–≤–∏—é', character: 'creeper' },
      { text: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –¥—Ä—É–∑—å—è–º–∏', character: 'villager' }
    ]
  },
  {
    id: 5,
    text: '–ö–∞–∫ —Ç–µ–±—è –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ?',
    options: [
      { text: '–ù–∞–¥–µ–∂–Ω—ã–π –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π', character: 'steve' },
      { text: '–°–º–µ–ª—ã–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π', character: 'alex' },
      { text: '–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∏ –æ–ø–∞—Å–Ω—ã–π', character: 'creeper' },
      { text: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π', character: 'villager' }
    ]
  },
  {
    id: 6,
    text: '–¢–≤–æ—è –ª—é–±–∏–º–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ?',
    options: [
      { text: '–î–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', character: 'steve' },
      { text: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –±–∏–æ–º—ã', character: 'alex' },
      { text: '–ü–æ–¥–∫—Ä–∞–¥—ã–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ', character: 'creeper' },
      { text: '–¢–æ—Ä–≥–æ–≤–∞—Ç—å –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è', character: 'villager' }
    ]
  },
  {
    id: 7,
    text: '–ö–∞–∫–æ–µ –æ—Ä—É–∂–∏–µ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?',
    options: [
      { text: '–ê–ª–º–∞–∑–Ω—ã–π –º–µ—á', character: 'steve' },
      { text: '–õ—É–∫ –∏ —Å—Ç—Ä–µ–ª—ã', character: 'alex' },
      { text: '–°–∞–º —Å–µ–±–µ –æ—Ä—É–∂–∏–µ', character: 'creeper' },
      { text: '–ú–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ä—É–∂–∏–µ', character: 'villager' }
    ]
  },
  {
    id: 8,
    text: '–¢–≤–æ–π –ª—é–±–∏–º—ã–π –±–∏–æ–º?',
    options: [
      { text: '–ì–æ—Ä—ã - –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤', character: 'steve' },
      { text: '–î–∂—É–Ω–≥–ª–∏ - –ø–æ–ª–Ω—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π', character: 'alex' },
      { text: '–¢–µ–º–Ω—ã–π –ª–µ—Å - –∑–∞–≥–∞–¥–æ—á–Ω—ã–π', character: 'creeper' },
      { text: '–†–∞–≤–Ω–∏–Ω—ã - —Å–ø–æ–∫–æ–π–Ω—ã–µ', character: 'villager' }
    ]
  },
  {
    id: 9,
    text: '–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ä–∏—Å–∫—É?',
    options: [
      { text: '–†–∏—Å–∫ –æ–ø—Ä–∞–≤–¥–∞–Ω —Ä–∞–¥–∏ —Ü–µ–ª–∏', character: 'steve' },
      { text: '–û–±–æ–∂–∞—é —Ä–∏—Å–∫ –∏ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω', character: 'alex' },
      { text: '–Ø —Å–∞–º –∏ –µ—Å—Ç—å —Ä–∏—Å–∫', character: 'creeper' },
      { text: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∏–∑–±–µ–≥–∞—Ç—å —Ä–∏—Å–∫–æ–≤', character: 'villager' }
    ]
  },
  {
    id: 10,
    text: '–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å –Ω–æ—á—å—é –≤ Minecraft?',
    options: [
      { text: '–ö–æ–ø–∞—é —à–∞—Ö—Ç—ã', character: 'steve' },
      { text: '–û—Ö–æ—á—É—Å—å –Ω–∞ –º–æ–±–æ–≤', character: 'alex' },
      { text: '–ë—Ä–æ–∂—É –≤ —Ç–µ–º–Ω–æ—Ç–µ', character: 'creeper' },
      { text: '–°–∏–∂—É –¥–æ–º–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', character: 'villager' }
    ]
  },
  {
    id: 11,
    text: '–¢–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞?',
    options: [
      { text: '–ó–∞–º–æ–∫ –∏–ª–∏ –∫—Ä–µ–ø–æ—Å—Ç—å', character: 'steve' },
      { text: '–î–æ–º –Ω–∞ –¥–µ—Ä–µ–≤–µ', character: 'alex' },
      { text: '–ü–æ–¥–∑–µ–º–Ω—ã–π –±—É–Ω–∫–µ—Ä', character: 'creeper' },
      { text: '–£—é—Ç–Ω—ã–π –∫–æ—Ç—Ç–µ–¥–∂', character: 'villager' }
    ]
  },
  {
    id: 12,
    text: '–ö–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –∫–æ–º–∞–Ω–¥–µ?',
    options: [
      { text: '–ë–µ—Ä—É –Ω–∞ —Å–µ–±—è —Ä–æ–ª—å –ª–∏–¥–µ—Ä–∞', character: 'steve' },
      { text: '–†–∞–∑–≤–µ–¥—ã–≤–∞—é –∏ –∏—Å—Å–ª–µ–¥—É—é', character: 'alex' },
      { text: '–î–µ–π—Å—Ç–≤—É—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ', character: 'creeper' },
      { text: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤—Å–µ—Ö', character: 'villager' }
    ]
  },
  {
    id: 13,
    text: '–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å, –Ω–∞–π–¥—è –∞–ª–º–∞–∑—ã?',
    options: [
      { text: '–°–¥–µ–ª–∞—é –ø–æ–ª–Ω—ã–π —Å–µ—Ç –±—Ä–æ–Ω–∏', character: 'steve' },
      { text: '–ó–∞—á–∞—Ä—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', character: 'alex' },
      { text: '–°–ø—Ä—è—á—É –∏—Ö', character: 'creeper' },
      { text: '–û–±–º–µ–Ω—è—é –Ω–∞ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ', character: 'villager' }
    ]
  },
  {
    id: 14,
    text: '–¢–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–∏–ø–ø–µ—Ä–∞–º?',
    options: [
      { text: '–£–Ω–∏—á—Ç–æ–∂–∞—é –Ω–∞ –º–µ—Å—Ç–µ', character: 'steve' },
      { text: '–û–±—Ö–æ–∂—É —Å—Ç–æ—Ä–æ–Ω–æ–π', character: 'alex' },
      { text: '–ú–æ–∏ –±—Ä–∞—Ç—å—è', character: 'creeper' },
      { text: '–ë–æ—é—Å—å –∏—Ö', character: 'villager' }
    ]
  },
  {
    id: 15,
    text: '–ö–∞–∫ —Ç—ã —É–∫—Ä–∞—à–∞–µ—à—å —Å–≤–æ–π –¥–æ–º?',
    options: [
      { text: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Å—É–Ω–¥—É–∫–∏ –∏ –≤–µ—Ä—Å—Ç–∞–∫', character: 'steve' },
      { text: '–≠–∫–∑–æ—Ç–∏—á–Ω–æ - —Ç—Ä–æ—Ñ–µ–∏ –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', character: 'alex' },
      { text: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ', character: 'creeper' },
      { text: '–£—é—Ç–Ω–æ - –∫–∞—Ä—Ç–∏–Ω—ã –∏ —Ü–≤–µ—Ç—ã', character: 'villager' }
    ]
  },
  {
    id: 16,
    text: '–¢–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ PvP?',
    options: [
      { text: '–ü—Ä—è–º–∞—è –∞—Ç–∞–∫–∞ –≤ –ª–æ–±', character: 'steve' },
      { text: '–¢–∞–∫—Ç–∏–∫–∞ –∏ –º–∞–Ω–µ–≤—Ä—ã', character: 'alex' },
      { text: '–í–Ω–µ–∑–∞–ø–Ω–æ—Å—Ç—å –∏ –≤–∑—Ä—ã–≤', character: 'creeper' },
      { text: '–Ø –Ω–µ –∏–≥—Ä–∞—é –≤ PvP', character: 'villager' }
    ]
  },
  {
    id: 17,
    text: '–ß—Ç–æ —Ç—ã –≤—ã—Ä–∞—â–∏–≤–∞–µ—à—å –Ω–∞ —Ñ–µ—Ä–º–µ?',
    options: [
      { text: '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞', character: 'steve' },
      { text: '–†–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', character: 'alex' },
      { text: '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã—Ä–∞—â–∏–≤–∞—é', character: 'creeper' },
      { text: '–ú–æ—Ä–∫–æ–≤—å –∏ –∫–∞—Ä—Ç–æ—à–∫—É', character: 'villager' }
    ]
  },
  {
    id: 18,
    text: '–ö–∞–∫ —Ç—ã –∏—Å—Å–ª–µ–¥—É–µ—à—å –ø–µ—â–µ—Ä—ã?',
    options: [
      { text: '–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ñ–∞–∫–µ–ª–∞–º–∏ –ø–æ–º–µ—á–∞—é –ø—É—Ç—å', character: 'steve' },
      { text: '–ò–¥—É –≤–≥–ª—É–±—å, –∫—É–¥–∞ –≥–ª–∞–∑–∞ –≥–ª—è–¥—è—Ç', character: 'alex' },
      { text: '–ë–µ—Å—à—É–º–Ω–æ –∏ –≤ —Ç–µ–º–Ω–æ—Ç–µ', character: 'creeper' },
      { text: '–Ø –Ω–µ —Ö–æ–∂—É –≤ –ø–µ—â–µ—Ä—ã', character: 'villager' }
    ]
  },
  {
    id: 19,
    text: '–¢–≤–æ–µ –ª—é–±–∏–º–æ–µ –∑–µ–ª—å–µ?',
    options: [
      { text: '–ó–µ–ª—å–µ —Å–∏–ª—ã', character: 'steve' },
      { text: '–ó–µ–ª—å–µ —Å–∫–æ—Ä–æ—Å—Ç–∏', character: 'alex' },
      { text: '–ó–µ–ª—å–µ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏', character: 'creeper' },
      { text: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è', character: 'villager' }
    ]
  },
  {
    id: 20,
    text: '–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≥–ª–∞–≤–Ω–æ–µ –≤ Minecraft?',
    options: [
      { text: '–î–æ—Å—Ç–∏—á—å –≤—Å–µ—Ö —Ü–µ–ª–µ–π', character: 'steve' },
      { text: '–£–≤–∏–¥–µ—Ç—å –≤–µ—Å—å –º–∏—Ä', character: 'alex' },
      { text: '–ë—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º', character: 'creeper' },
      { text: '–ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏', character: 'villager' }
    ]
  }
];

const characters: Character[] = [
  {
    id: 'steve',
    name: '–°—Ç–∏–≤',
    emoji: '‚õèÔ∏è',
    description: '–¢—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–µ—Ä–æ–π Minecraft! –¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–π –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º.',
    traits: ['–¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π', '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π', '–ù–∞–¥–µ–∂–Ω—ã–π', '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π'],
    color: 'from-blue-500 to-cyan-500'
  },
  {
    id: 'alex',
    name: '–ê–ª–µ–∫—Å',
    emoji: 'üó∫Ô∏è',
    description: '–¢—ã –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –õ—é–±–∏—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏ –Ω–µ –±–æ–∏—à—å—Å—è —Ä–∏—Å–∫–æ–≤–∞—Ç—å.',
    traits: ['–°–º–µ–ª—ã–π', '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π', '–ê–≤–∞–Ω—Ç—é—Ä–Ω—ã–π', '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π'],
    color: 'from-orange-500 to-red-500'
  },
  {
    id: 'creeper',
    name: '–ö—Ä–∏–ø–µ—Ä',
    emoji: 'üí•',
    description: '–¢—ã –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π! –ù–µ –ª—é–±–∏—à—å —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.',
    traits: ['–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π', '–†–µ—à–∏—Ç–µ–ª—å–Ω—ã–π', '–í–∑—Ä—ã–≤–Ω–æ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π'],
    color: 'from-green-500 to-emerald-600'
  },
  {
    id: 'villager',
    name: '–ñ–∏—Ç–µ–ª—å –¥–µ—Ä–µ–≤–Ω–∏',
    emoji: 'üèòÔ∏è',
    description: '–¢—ã –¥—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏! –û–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º.',
    traits: ['–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π', '–©–µ–¥—Ä—ã–π', '–ú–∏—Ä–æ–ª—é–±–∏–≤—ã–π'],
    color: 'from-purple-500 to-pink-500'
  }
];

export default function Index() {
  const [started, setStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<string, number>>({});
  const [showResult, setShowResult] = useState(false);
  const [result, setResult] = useState<Character | null>(null);

  const handleAnswer = (character: string) => {
    const newAnswers = { ...answers };
    newAnswers[character] = (newAnswers[character] || 0) + 1;
    setAnswers(newAnswers);

    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult(newAnswers);
    }
  };

  const calculateResult = (finalAnswers: Record<string, number>) => {
    let maxCount = 0;
    let resultCharacter = 'steve';

    Object.entries(finalAnswers).forEach(([char, count]) => {
      if (count > maxCount) {
        maxCount = count;
        resultCharacter = char;
      }
    });

    const character = characters.find(c => c.id === resultCharacter);
    setResult(character || characters[0]);
    setShowResult(true);
  };

  const restart = () => {
    setStarted(false);
    setCurrentQuestion(0);
    setAnswers({});
    setShowResult(false);
    setResult(null);
  };

  const startTest = () => {
    setStarted(true);
    setCurrentQuestion(0);
  };

  if (showResult && result) {
    return (
      <div className={`min-h-screen bg-gradient-to-br ${result.color} flex items-center justify-center p-4`}>
        <Card className="max-w-2xl w-full bg-white/95 backdrop-blur-sm border-4 border-game-dark p-8">
          <div className="text-center space-y-6">
            <div className="text-8xl mb-4 animate-bounce-in">{result.emoji}</div>
            
            <div>
              <h1 className="text-5xl font-game text-game-dark mb-2">–¢—ã - {result.name}!</h1>
              <p className="text-xl font-body text-game-dark/80">{result.description}</p>
            </div>

            <div className="bg-game-dark/5 rounded-xl p-6">
              <h3 className="text-2xl font-game text-game-dark mb-4">–¢–≤–æ–∏ —á–µ—Ä—Ç—ã:</h3>
              <div className="flex flex-wrap gap-3 justify-center">
                {result.traits.map((trait, index) => (
                  <div
                    key={index}
                    className="bg-white border-2 border-game-dark px-4 py-2 rounded-full font-body text-game-dark"
                  >
                    ‚ú® {trait}
                  </div>
                ))}
              </div>
            </div>

            <div className="space-y-3">
              <Button
                onClick={restart}
                className="w-full h-16 text-2xl font-game bg-gradient-to-r from-game-orange to-game-yellow hover:scale-105 transition-transform"
              >
                <Icon name="RotateCcw" size={28} className="mr-2" />
                –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑
              </Button>

              <Button
                onClick={() => {
                  if (navigator.share) {
                    navigator.share({
                      title: '–ö–∞–∫–æ–π —Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ Minecraft?',
                      text: `–Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª: ${result.name}! ${result.emoji}`,
                      url: window.location.href
                    });
                  }
                }}
                variant="outline"
                className="w-full h-14 text-xl font-body border-2 border-game-dark hover:bg-white"
              >
                <Icon name="Share2" size={24} className="mr-2" />
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
              </Button>
            </div>
          </div>
        </Card>
      </div>
    );
  }

  if (!started) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 flex items-center justify-center p-4">
        <Card className="max-w-2xl w-full bg-white/95 backdrop-blur-sm border-4 border-game-dark p-8">
          <div className="text-center space-y-6">
            <div className="flex justify-center gap-4 mb-4">
              <div className="text-6xl animate-bounce">üéÆ</div>
              <div className="text-6xl animate-bounce" style={{ animationDelay: '0.1s' }}>‚õèÔ∏è</div>
              <div className="text-6xl animate-bounce" style={{ animationDelay: '0.2s' }}>üéØ</div>
            </div>

            <div>
              <h1 className="text-5xl font-game text-game-dark mb-3">
                –ö–∞–∫–æ–π —Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ Minecraft?
              </h1>
              <p className="text-xl font-body text-game-dark/80">
                –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π, –∫—Ç–æ —Ç—ã –≤ –º–∏—Ä–µ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç!
              </p>
            </div>

            <div className="bg-game-dark/5 rounded-xl p-6 text-left">
              <h3 className="text-xl font-game text-game-dark mb-3">–¢–µ–±—è –∂–¥–µ—Ç:</h3>
              <ul className="space-y-2 font-body text-game-dark/80">
                <li className="flex items-center gap-2">
                  <span className="text-2xl">üìù</span>
                  {questions.length} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                </li>
                <li className="flex items-center gap-2">
                  <span className="text-2xl">üé≠</span>
                  –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
                </li>
                <li className="flex items-center gap-2">
                  <span className="text-2xl">‚ú®</span>
                  –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
                </li>
                <li className="flex items-center gap-2">
                  <span className="text-2xl">üì§</span>
                  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                </li>
              </ul>
            </div>

            <Button
              onClick={startTest}
              className="w-full h-16 text-2xl font-game bg-gradient-to-r from-game-orange to-game-yellow hover:scale-105 transition-transform"
            >
              <Icon name="Play" size={32} className="mr-2" />
              –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  const question = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 flex items-center justify-center p-4">
      <Card className="max-w-2xl w-full bg-white/95 backdrop-blur-sm border-4 border-game-dark p-8">
        <div className="space-y-6">
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-lg font-game text-game-dark">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
              </span>
              <span className="text-lg font-game text-game-dark">
                {Math.round(progress)}%
              </span>
            </div>
            
            <div className="w-full bg-game-dark/20 rounded-full h-3 overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-game-orange to-game-yellow transition-all duration-500"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>

          <div className="text-center py-6">
            <h2 className="text-3xl font-game text-game-dark mb-2">
              {question.text}
            </h2>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {question.options.map((option, index) => (
              <Button
                key={index}
                onClick={() => handleAnswer(option.character)}
                className="h-auto py-6 px-6 text-lg font-body bg-white hover:bg-gradient-to-r hover:from-game-cyan hover:to-game-yellow border-2 border-game-dark text-game-dark hover:text-white transition-all hover:scale-105"
              >
                <div className="text-left w-full">
                  {option.text}
                </div>
              </Button>
            ))}
          </div>

          <Button
            onClick={restart}
            variant="outline"
            className="w-full border-2 border-game-dark hover:bg-game-dark/10"
          >
            <Icon name="Home" size={20} className="mr-2" />
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </Button>
        </div>
      </Card>
    </div>
  );
}
